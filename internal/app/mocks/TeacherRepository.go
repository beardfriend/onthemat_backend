// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	ent "onthemat/pkg/ent"

	mock "github.com/stretchr/testify/mock"
)

// TeacherRepository is an autogenerated mock type for the TeacherRepository type
type TeacherRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, t, userId
func (_m *TeacherRepository) Create(ctx context.Context, t *ent.Teacher, userId int) error {
	ret := _m.Called(ctx, t, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Teacher, int) error); ok {
		r0 = rf(ctx, t, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, yogaSorts, areas
func (_m *TeacherRepository) List(ctx context.Context, yogaSorts []*string, areas []*string) ([]*ent.Teacher, error) {
	ret := _m.Called(ctx, yogaSorts, areas)

	var r0 []*ent.Teacher
	if rf, ok := ret.Get(0).(func(context.Context, []*string, []*string) []*ent.Teacher); ok {
		r0 = rf(ctx, yogaSorts, areas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Teacher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*string, []*string) error); ok {
		r1 = rf(ctx, yogaSorts, areas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTeacherRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeacherRepository creates a new instance of TeacherRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeacherRepository(t mockConstructorTestingTNewTeacherRepository) *TeacherRepository {
	mock := &TeacherRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
