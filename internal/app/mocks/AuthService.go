// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ent "onthemat/pkg/ent"
	google "onthemat/pkg/google"

	kakao "onthemat/pkg/kakao"

	mock "github.com/stretchr/testify/mock"

	naver "onthemat/pkg/naver"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// ExtractTokenFromHeader provides a mock function with given fields: token
func (_m *AuthService) ExtractTokenFromHeader(token string) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRandomPassword provides a mock function with given fields:
func (_m *AuthService) GenerateRandomPassword() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateRandomString provides a mock function with given fields:
func (_m *AuthService) GenerateRandomString() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGoogleInfo provides a mock function with given fields: code
func (_m *AuthService) GetGoogleInfo(code string) (*google.GetUserInfo, error) {
	ret := _m.Called(code)

	var r0 *google.GetUserInfo
	if rf, ok := ret.Get(0).(func(string) *google.GetUserInfo); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*google.GetUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGoogleRedirectUrl provides a mock function with given fields:
func (_m *AuthService) GetGoogleRedirectUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetKakaoInfo provides a mock function with given fields: code
func (_m *AuthService) GetKakaoInfo(code string) (*kakao.GetUserInfoSuccessBody, error) {
	ret := _m.Called(code)

	var r0 *kakao.GetUserInfoSuccessBody
	if rf, ok := ret.Get(0).(func(string) *kakao.GetUserInfoSuccessBody); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kakao.GetUserInfoSuccessBody)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKakaoRedirectUrl provides a mock function with given fields:
func (_m *AuthService) GetKakaoRedirectUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNaverInfo provides a mock function with given fields: code
func (_m *AuthService) GetNaverInfo(code string) (*naver.GetUserInfo, error) {
	ret := _m.Called(code)

	var r0 *naver.GetUserInfo
	if rf, ok := ret.Get(0).(func(string) *naver.GetUserInfo); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*naver.GetUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNaverRedirectUrl provides a mock function with given fields:
func (_m *AuthService) GetNaverRedirectUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HashPassword provides a mock function with given fields: password, secret
func (_m *AuthService) HashPassword(password string, secret string) string {
	ret := _m.Called(password, secret)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(password, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsExpiredEmailForVerify provides a mock function with given fields: issuedAt
func (_m *AuthService) IsExpiredEmailForVerify(issuedAt string) bool {
	ret := _m.Called(issuedAt)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(issuedAt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendEmailResetPassword provides a mock function with given fields: user
func (_m *AuthService) SendEmailResetPassword(user *ent.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ent.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailVerifiedUser provides a mock function with given fields: email, authKey, issuedAt, onthematHost
func (_m *AuthService) SendEmailVerifiedUser(email string, authKey string, issuedAt string, onthematHost string) error {
	ret := _m.Called(email, authKey, issuedAt, onthematHost)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(email, authKey, issuedAt, onthematHost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t mockConstructorTestingTNewAuthService) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
