// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	service "onthemat/internal/app/service"

	mock "github.com/stretchr/testify/mock"
)

// AreaService is an autogenerated mock type for the AreaService type
type AreaService struct {
	mock.Mock
}

// ParseExcelData provides a mock function with given fields: fileUrl
func (_m *AreaService) ParseExcelData(fileUrl string) ([]service.Sido, []service.Sigungu, error) {
	ret := _m.Called(fileUrl)

	var r0 []service.Sido
	if rf, ok := ret.Get(0).(func(string) []service.Sido); ok {
		r0 = rf(fileUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.Sido)
		}
	}

	var r1 []service.Sigungu
	if rf, ok := ret.Get(1).(func(string) []service.Sigungu); ok {
		r1 = rf(fileUrl)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]service.Sigungu)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(fileUrl)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewAreaService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAreaService creates a new instance of AreaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAreaService(t mockConstructorTestingTNewAreaService) *AreaService {
	mock := &AreaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
