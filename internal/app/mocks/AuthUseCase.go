// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	fasthttp "github.com/valyala/fasthttp"

	transport "onthemat/internal/app/transport"

	usecase "onthemat/internal/app/usecase"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

// CheckDuplicatedEmail provides a mock function with given fields: ctx, email
func (_m *AuthUseCase) CheckDuplicatedEmail(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GoogleRedirectUrl provides a mock function with given fields: ctx
func (_m *AuthUseCase) GoogleRedirectUrl(ctx *fasthttp.RequestCtx) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KakaoRedirectUrl provides a mock function with given fields: ctx
func (_m *AuthUseCase) KakaoRedirectUrl(ctx *fasthttp.RequestCtx) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, body
func (_m *AuthUseCase) Login(ctx *fasthttp.RequestCtx, body *transport.LoginBody) (*usecase.LoginResult, error) {
	ret := _m.Called(ctx, body)

	var r0 *usecase.LoginResult
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, *transport.LoginBody) *usecase.LoginResult); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.LoginResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx, *transport.LoginBody) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NaverRedirectUrl provides a mock function with given fields: ctx
func (_m *AuthUseCase) NaverRedirectUrl(ctx *fasthttp.RequestCtx) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, authorizationHeader
func (_m *AuthUseCase) Refresh(ctx *fasthttp.RequestCtx, authorizationHeader []byte) (*usecase.RefreshResult, error) {
	ret := _m.Called(ctx, authorizationHeader)

	var r0 *usecase.RefreshResult
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, []byte) *usecase.RefreshResult); ok {
		r0 = rf(ctx, authorizationHeader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.RefreshResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx, []byte) error); ok {
		r1 = rf(ctx, authorizationHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmailResetPassword provides a mock function with given fields: ctx, email
func (_m *AuthUseCase) SendEmailResetPassword(ctx *fasthttp.RequestCtx, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignUp provides a mock function with given fields: ctx, body
func (_m *AuthUseCase) SignUp(ctx *fasthttp.RequestCtx, body *transport.SignUpBody) error {
	ret := _m.Called(ctx, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, *transport.SignUpBody) error); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialLogin provides a mock function with given fields: ctx, socialName, code
func (_m *AuthUseCase) SocialLogin(ctx *fasthttp.RequestCtx, socialName string, code string) (*usecase.LoginResult, error) {
	ret := _m.Called(ctx, socialName, code)

	var r0 *usecase.LoginResult
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string, string) *usecase.LoginResult); ok {
		r0 = rf(ctx, socialName, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.LoginResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*fasthttp.RequestCtx, string, string) error); ok {
		r1 = rf(ctx, socialName, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialSignUp provides a mock function with given fields: ctx, body
func (_m *AuthUseCase) SocialSignUp(ctx *fasthttp.RequestCtx, body *transport.SocialSignUpBody) error {
	ret := _m.Called(ctx, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, *transport.SocialSignUpBody) error); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifiedEmail provides a mock function with given fields: ctx, email, authKey
func (_m *AuthUseCase) VerifiedEmail(ctx *fasthttp.RequestCtx, email string, authKey string) error {
	ret := _m.Called(ctx, email, authKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, string, string) error); ok {
		r0 = rf(ctx, email, authKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthUseCase(t mockConstructorTestingTNewAuthUseCase) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
