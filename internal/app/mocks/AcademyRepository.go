// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	common "onthemat/internal/app/common"

	ent "onthemat/pkg/ent"

	mock "github.com/stretchr/testify/mock"
)

// AcademyRepository is an autogenerated mock type for the AcademyRepository type
type AcademyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, academy, userId
func (_m *AcademyRepository) Create(ctx context.Context, academy *ent.Academy, userId int) error {
	ret := _m.Called(ctx, academy, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Academy, int) error); ok {
		r0 = rf(ctx, academy, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userId
func (_m *AcademyRepository) Get(ctx context.Context, userId int) (*ent.Academy, error) {
	ret := _m.Called(ctx, userId)

	var r0 *ent.Academy
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.Academy); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Academy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, p
func (_m *AcademyRepository) List(ctx context.Context, p *common.ListParams) ([]*ent.Academy, error) {
	ret := _m.Called(ctx, p)

	var r0 []*ent.Academy
	if rf, ok := ret.Get(0).(func(context.Context, *common.ListParams) []*ent.Academy); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Academy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.ListParams) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Total provides a mock function with given fields: ctx, p
func (_m *AcademyRepository) Total(ctx context.Context, p *common.TotalParams) (int, error) {
	ret := _m.Called(ctx, p)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *common.TotalParams) int); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *common.TotalParams) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, academy, userId
func (_m *AcademyRepository) Update(ctx context.Context, academy *ent.Academy, userId int) error {
	ret := _m.Called(ctx, academy, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Academy, int) error); ok {
		r0 = rf(ctx, academy, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAcademyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAcademyRepository creates a new instance of AcademyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAcademyRepository(t mockConstructorTestingTNewAcademyRepository) *AcademyRepository {
	mock := &AcademyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
