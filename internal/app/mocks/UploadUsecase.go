// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	fasthttp "github.com/valyala/fasthttp"

	multipart "mime/multipart"

	transport "onthemat/internal/app/transport"
)

// UploadUsecase is an autogenerated mock type for the UploadUsecase type
type UploadUsecase struct {
	mock.Mock
}

// Upload provides a mock function with given fields: ctx, file, params, userId
func (_m *UploadUsecase) Upload(ctx *fasthttp.RequestCtx, file *multipart.FileHeader, params *transport.UploadParams, userId int) error {
	ret := _m.Called(ctx, file, params, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fasthttp.RequestCtx, *multipart.FileHeader, *transport.UploadParams, int) error); ok {
		r0 = rf(ctx, file, params, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUploadUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploadUsecase creates a new instance of UploadUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploadUsecase(t mockConstructorTestingTNewUploadUsecase) *UploadUsecase {
	mock := &UploadUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
