// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	ent "onthemat/pkg/ent"

	mock "github.com/stretchr/testify/mock"

	request "onthemat/internal/app/transport/request"

	transport "onthemat/internal/app/transport"

	utils "onthemat/internal/app/utils"
)

// AcademyUsecase is an autogenerated mock type for the AcademyUsecase type
type AcademyUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, academy, userId
func (_m *AcademyUsecase) Create(ctx context.Context, academy *transport.AcademyCreateRequestBody, userId int) error {
	ret := _m.Called(ctx, academy, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *transport.AcademyCreateRequestBody, int) error); ok {
		r0 = rf(ctx, academy, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userId
func (_m *AcademyUsecase) Get(ctx context.Context, userId int) (*ent.Academy, error) {
	ret := _m.Called(ctx, userId)

	var r0 *ent.Academy
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.Academy); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Academy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, a
func (_m *AcademyUsecase) List(ctx context.Context, a *request.AcademyListQueries) ([]*ent.Academy, *utils.PagenationInfo, error) {
	ret := _m.Called(ctx, a)

	var r0 []*ent.Academy
	if rf, ok := ret.Get(0).(func(context.Context, *request.AcademyListQueries) []*ent.Academy); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Academy)
		}
	}

	var r1 *utils.PagenationInfo
	if rf, ok := ret.Get(1).(func(context.Context, *request.AcademyListQueries) *utils.PagenationInfo); ok {
		r1 = rf(ctx, a)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.PagenationInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *request.AcademyListQueries) error); ok {
		r2 = rf(ctx, a)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, a, userId
func (_m *AcademyUsecase) Update(ctx context.Context, a *transport.AcademyUpdateRequestBody, userId int) error {
	ret := _m.Called(ctx, a, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *transport.AcademyUpdateRequestBody, int) error); ok {
		r0 = rf(ctx, a, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAcademyUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAcademyUsecase creates a new instance of AcademyUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAcademyUsecase(t mockConstructorTestingTNewAcademyUsecase) *AcademyUsecase {
	mock := &AcademyUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
