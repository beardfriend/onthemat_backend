// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	ent "onthemat/pkg/ent"

	mock "github.com/stretchr/testify/mock"
)

// YogaRepository is an autogenerated mock type for the YogaRepository type
type YogaRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *YogaRepository) Create(ctx context.Context, data *ent.Yoga) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Yoga) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroup provides a mock function with given fields: ctx, data
func (_m *YogaRepository) CreateGroup(ctx context.Context, data *ent.YogaGroup) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.YogaGroup) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRaw provides a mock function with given fields: ctx, data
func (_m *YogaRepository) CreateRaw(ctx context.Context, data *ent.YogaRaw) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.YogaRaw) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroups provides a mock function with given fields: ctx, ids
func (_m *YogaRepository) DeleteGroups(ctx context.Context, ids []int) (int, error) {
	ret := _m.Called(ctx, ids)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, []int) int); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, data
func (_m *YogaRepository) UpdateGroup(ctx context.Context, data *ent.YogaGroup) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.YogaGroup) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewYogaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewYogaRepository creates a new instance of YogaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewYogaRepository(t mockConstructorTestingTNewYogaRepository) *YogaRepository {
	mock := &YogaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
