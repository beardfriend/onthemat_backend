// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	validatorx "onthemat/pkg/validatorx"

	mock "github.com/stretchr/testify/mock"
)

// ValidatorSetter is an autogenerated mock type for the ValidatorSetter type
type ValidatorSetter struct {
	mock.Mock
}

// AddPasswordAtLeastOneCharNumValidation provides a mock function with given fields: tag
func (_m *ValidatorSetter) AddPasswordAtLeastOneCharNumValidation(tag string) validatorx.ValidatorSetter {
	ret := _m.Called(tag)

	var r0 validatorx.ValidatorSetter
	if rf, ok := ret.Get(0).(func(string) validatorx.ValidatorSetter); ok {
		r0 = rf(tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validatorx.ValidatorSetter)
		}
	}

	return r0
}

// AddPhoneNumValidation provides a mock function with given fields: tagName
func (_m *ValidatorSetter) AddPhoneNumValidation(tagName string) validatorx.ValidatorSetter {
	ret := _m.Called(tagName)

	var r0 validatorx.ValidatorSetter
	if rf, ok := ret.Get(0).(func(string) validatorx.ValidatorSetter); ok {
		r0 = rf(tagName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validatorx.ValidatorSetter)
		}
	}

	return r0
}

// AddUrlValidation provides a mock function with given fields: tagName
func (_m *ValidatorSetter) AddUrlValidation(tagName string) validatorx.ValidatorSetter {
	ret := _m.Called(tagName)

	var r0 validatorx.ValidatorSetter
	if rf, ok := ret.Get(0).(func(string) validatorx.ValidatorSetter); ok {
		r0 = rf(tagName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validatorx.ValidatorSetter)
		}
	}

	return r0
}

// Init provides a mock function with given fields:
func (_m *ValidatorSetter) Init() validatorx.Validator {
	ret := _m.Called()

	var r0 validatorx.Validator
	if rf, ok := ret.Get(0).(func() validatorx.Validator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validatorx.Validator)
		}
	}

	return r0
}

// SetExtractTagName provides a mock function with given fields:
func (_m *ValidatorSetter) SetExtractTagName() validatorx.ValidatorSetter {
	ret := _m.Called()

	var r0 validatorx.ValidatorSetter
	if rf, ok := ret.Get(0).(func() validatorx.ValidatorSetter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validatorx.ValidatorSetter)
		}
	}

	return r0
}

type mockConstructorTestingTNewValidatorSetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidatorSetter creates a new instance of ValidatorSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidatorSetter(t mockConstructorTestingTNewValidatorSetter) *ValidatorSetter {
	mock := &ValidatorSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
