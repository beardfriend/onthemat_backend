// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	jwt "onthemat/pkg/auth/jwt"

	mock "github.com/stretchr/testify/mock"

	v4 "github.com/golang-jwt/jwt/v4"
)

// JwtOption is an autogenerated mock type for the JwtOption type
type JwtOption struct {
	mock.Mock
}

// Init provides a mock function with given fields:
func (_m *JwtOption) Init() jwt.Jwt {
	ret := _m.Called()

	var r0 jwt.Jwt
	if rf, ok := ret.Get(0).(func() jwt.Jwt); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Jwt)
		}
	}

	return r0
}

// WithSignKey provides a mock function with given fields: key
func (_m *JwtOption) WithSignKey(key string) jwt.JwtOption {
	ret := _m.Called(key)

	var r0 jwt.JwtOption
	if rf, ok := ret.Get(0).(func(string) jwt.JwtOption); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.JwtOption)
		}
	}

	return r0
}

// WithSigningMethod provides a mock function with given fields: method
func (_m *JwtOption) WithSigningMethod(method v4.SigningMethod) jwt.JwtOption {
	ret := _m.Called(method)

	var r0 jwt.JwtOption
	if rf, ok := ret.Get(0).(func(v4.SigningMethod) jwt.JwtOption); ok {
		r0 = rf(method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.JwtOption)
		}
	}

	return r0
}

type mockConstructorTestingTNewJwtOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewJwtOption creates a new instance of JwtOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJwtOption(t mockConstructorTestingTNewJwtOption) *JwtOption {
	mock := &JwtOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
