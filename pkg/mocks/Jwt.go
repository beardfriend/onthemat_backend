// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v4"
	mock "github.com/stretchr/testify/mock"
)

// Jwt is an autogenerated mock type for the Jwt type
type Jwt struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: claim
func (_m *Jwt) GenerateToken(claim jwt.Claims) (string, error) {
	ret := _m.Called(claim)

	var r0 string
	if rf, ok := ret.Get(0).(func(jwt.Claims) string); ok {
		r0 = rf(claim)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jwt.Claims) error); ok {
		r1 = rf(claim)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseToken provides a mock function with given fields: tokenString, result
func (_m *Jwt) ParseToken(tokenString string, result jwt.Claims) error {
	ret := _m.Called(tokenString, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, jwt.Claims) error); ok {
		r0 = rf(tokenString, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewJwt interface {
	mock.TestingT
	Cleanup(func())
}

// NewJwt creates a new instance of Jwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJwt(t mockConstructorTestingTNewJwt) *Jwt {
	mock := &Jwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
